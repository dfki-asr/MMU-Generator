#if UNITY_EDITOR
using MMICSharp.Common.Communication;
using MMIStandard;
using MMIUnity;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Threading.Tasks;
using UnityEditor;
using UnityEditor.Animations;
using UnityEditor.Callbacks;
using UnityEngine;

/// <summary>
/// This class provides functionality of intermediate steps in the process of a MMU creation.
/// </summary>
public class MMUFactory
{
    public static string packageName = "de.dfki.mmu-generator";
    /// <summary>
    /// Creates a new MMU. 
    /// </summary>
    /// <returns>The creation progress object for thew new MMU</returns>
    public static MMUCreation New()
    {
        AssetImportHelper.PendingMotionImports.Clear();
        CreationStorage.DeleteCurrent();
        var newCreation = new MMUCreation();
        newCreation.Description.Version = "1.0";
        newCreation.Description.MotionType = "";
        CreationStorage.SaveCurrent(newCreation, false);
        return newCreation;
    }

    /// <summary>
    /// Creates the file structure for the given MMU creation.
    /// </summary>
    /// <param name="mmuCreation">The MMU creation for which the file structure should be created</param>
    /// <returns>The creation object</returns>
    public static MMUCreation Setup(MMUCreation mmuCreation)
    {
        SetupFileStructure(mmuCreation);
        return mmuCreation;
    }

    /// <summary>
    /// Exports the given MMU creation as zip file to the specified path.
    /// </summary>
    /// <param name="mmuCreation">The MMU creation that should be exported</param>
    /// <param name="zipFilePath">Complete file path (including file name) where the zip file should be created</param>
    /// <returns>The creation object</returns>
    public static MMUCreation Export(MMUCreation mmuCreation, string zipFilePath)
    {
        //Create a temp directory
        string tempDirectory = $"TempAutoGenerated/{mmuCreation.Description.Name}/";
        if (Directory.Exists(tempDirectory))
            Directory.Delete(tempDirectory, true);

        Directory.CreateDirectory(tempDirectory);

        zipFilePath = Path.Combine(zipFilePath, mmuCreation.Description.Name);


        string assetdb_name = $"{mmuCreation.Description.Name}assets";
        //Change the name of the bundle
        MMUGenerator.ChangeBundleName(assetdb_name, mmuCreation.Prefab);

        //Build the asset bundle and place in autogenerated
        BuildPipeline.BuildAssetBundles(tempDirectory, BuildAssetBundleOptions.None, BuildTarget.StandaloneWindows);

        //Find all specific class files
        List<string> classFiles = MMUGenerator.GetFiles("Assets//MMUs//" + mmuCreation.Description.Name + "//Scripts//").Where(s => Path.GetExtension(s) == ".cs").ToList();

        //Add  all common class files
        classFiles.AddRange(MMUGenerator.GetFiles("Assets//MMUGenerator//CommonScripts").Where(s => Path.GetExtension(s) == ".cs").ToList());


        //Add the required dependencies for a basic MMU
        List<string> dllFiles = MMUGenerator.GetFiles("Assets//MMUGenerator//Dependencies").Where(s => Path.GetExtension(s) == ".dll").ToList();

        //Add the specific dependencies for the MMU (if defined)
        dllFiles.AddRange(MMUGenerator.GetFiles("Assets//MMUs//" + mmuCreation.Description.Name + "//Dependencies").Where(s => Path.GetExtension(s) == ".dll").ToList());

        string tmpScripts = Path.Combine(tempDirectory, "Scripts");
        if (!Directory.Exists(tmpScripts))
        {
            Directory.CreateDirectory(tmpScripts);
        }
        foreach (string cFile in classFiles)
        {
            File.Copy(cFile, Path.Combine(tmpScripts, Path.GetFileName(cFile)));
        }

        foreach (string dFile in dllFiles)
        {
            File.Copy(dFile, Path.Combine(tempDirectory, Path.GetFileName(dFile)));
        }

        /*
        //Generate the dll based on the given class and dll files
        if (!MMUGenerator.GenerateDll(classFiles, dllFiles, tempDirectory, mmuCreation.Description.Name))
        {
            EditorUtility.DisplayDialog("Error at generating dll.", "Dll cannot be compiled. Please check the error messages and ensure that all required dependencies (despite the ones in MMUGenerator/Dependencies) are in the dependencies folder of the MMU. " +
                "Moreover please ensure that all references source code cs files are either in the Scripts folder of the MMU or in the CommonSourceFolder of the MMUGenerator.", "Continue");
            return mmuCreation;
        }
        */

        //Generate the description file
        MMUGenerator.GenerateDescription(mmuCreation.Description, tempDirectory);

        string solution = File.ReadAllText($"Packages/{packageName}/Editor/resources/solution_basis.template");
        solution = solution.Replace("REPLACE_ASSETDB_NAME", assetdb_name);
        solution = solution.Replace("MMU_NAME", mmuCreation.Description.Name);
        File.WriteAllText($"{tempDirectory}//{mmuCreation.Description.Name}.csproj", solution);

        List<string> assets = new List<string>();
        foreach (var guid in AssetDatabase.FindAssets("*", new string[] { $"Assets//MMUs//{mmuCreation.Description.Name}" }))
        {
            string path = AssetDatabase.GUIDToAssetPath(guid);
            assets.Add(path);
        }

        //Cleanup the directory

        AssetDatabase.ExportPackage(assets.ToArray(), $"{tempDirectory}//{mmuCreation.Description.Name}.unitypackage");

        MMUGenerator.CleanUpDirectory(tempDirectory, mmuCreation.Description.Name);

        if (File.Exists(zipFilePath))
        {
            File.Delete(zipFilePath);
        }

        if (Directory.Exists(zipFilePath))
        {
            Directory.Delete(zipFilePath, true);
        }
        Directory.CreateDirectory(zipFilePath);

        Utils.DirectoryCopy(tempDirectory, zipFilePath, true);
        string appPath = EditorApplication.applicationPath;

        appPath = System.IO.Path.Combine(Path.GetDirectoryName(appPath), "Data", "Managed", "UnityEngine.dll");
        Debug.Log(EditorApplication.applicationPath);
        //Add the unity dll (UnityEngine dll has a different ending since otherwise unity would throw errors)
        System.IO.File.Copy(appPath, System.IO.Path.Combine(zipFilePath, System.IO.Path.GetFileName("UnityEngine.dll")));

        //ZipFile.CreateFromDirectory(tempDirectory, zipFilePath, System.IO.Compression.CompressionLevel.Fastest, true);

        //Remove all temporary generated files
        /*
        string[] tempFiles = Directory.GetFiles(tempDirectory);
        for (int i = 0; i < tempFiles.Length; i++)
        {
            File.Delete(tempFiles[i]);
        }*/

        //Remove the temp directory
        Directory.Delete(tempDirectory, true);

        EditorUtility.RevealInFinder(zipFilePath);

        Debug.Log("MMU successfully generated!");

        CreationStorage.SaveCurrent(mmuCreation);

        return mmuCreation;
    }

    private static void SetupFileStructure(MMUCreation mmuCreation)
    {
        var description = mmuCreation.Description;
        //Choose selected

        Directory.CreateDirectory("Assets//MMUs//" + description.Name);
        Directory.CreateDirectory("Assets//MMUs//" + description.Name + "//Dependencies");
        Directory.CreateDirectory("Assets//MMUs//" + description.Name + "//Scripts");

        //Create Directory for Savefiles
        Directory.CreateDirectory("Assets//MMUs//" + description.Name + "//Savefiles");

        //Create a unique id
        description.ID = System.Guid.NewGuid().ToString();
        description.Language = "UnityC#";
        description.Dependencies = new List<MDependency>();
        description.AssemblyName = description.Name + ".dll";

        //Generate the .cs file
        //Get the template for the auto-generated MMU class
        string mmuTemplate;

        if (mmuCreation.IsMoCapMMU)
        {
            mmuTemplate = File.ReadAllText($"Packages/{packageName}/Editor/resources/MMUTemplateBaseClassAnimator.template");
        }
        else
        {
            mmuTemplate = File.ReadAllText($"Packages/{packageName}/Editor/resources/MMUTemplateBaseClass.template");
        }

        //Replace the placeholders
        mmuTemplate = mmuTemplate.Replace("CLASS_NAME", description.Name);
        mmuTemplate = mmuTemplate.Replace("MOTION_TYPE", description.MotionType);

        //Write the class to the location
        File.WriteAllText("Assets//MMUs//" + description.Name + "//Scripts//" + description.Name + ".cs", mmuTemplate);

        //Store the description
        File.WriteAllText("Assets//MMUs//" + description.Name + "//description.json", Serialization.ToJsonString(description));

        Debug.Log("File structure for MMU " + description.Name + " successfully created!");

        var tpose = Resources.Load("tpose");
        var instance = GameObject.Instantiate(tpose) as GameObject;
        instance.name = description.Name;

        mmuCreation.Instance = instance;

        if (mmuCreation.IsMoCapMMU)
        {
            var animatorController = AnimatorController.CreateAnimatorControllerAtPath($"Assets/MMUs/{description.Name}/{description.Name}.controller");
            animatorController.AddParameter("AnimationDone", AnimatorControllerParameterType.Bool);
            var firstLayer = animatorController.layers[0]; //first layer is lost when storing as asset -> saving for later

            var animator = instance.GetComponent<Animator>();
            animator.runtimeAnimatorController = animatorController;
            animator.cullingMode = AnimatorCullingMode.AlwaysAnimate;

            mmuCreation.AnimatorController = animatorController;

            string fbxAssetPath = $@"Assets/MMUs/{description.Name}/{Path.GetFileName(mmuCreation.FbxFilePath)}";
            File.Copy(mmuCreation.FbxFilePath, fbxAssetPath);

            AssetImportHelper.PendingMotionImports.Add(fbxAssetPath, () =>
            {
                Debug.Log("PendingMotionCallback");

                var animationClip = AssetDatabase.LoadAssetAtPath<AnimationClip>(fbxAssetPath);

                if (animatorController.layers.Length == 0)
                {
                    animatorController.AddLayer(firstLayer);
                }
                var mainState = animatorController.AddMotion(animationClip);
                mainState.AddStateMachineBehaviour<AnimationEndEvent>();

                var secondState = animatorController.AddMotion(animationClip);

                var loopTransition = mainState.AddExitTransition();
                loopTransition.destinationState = secondState;
                loopTransition.exitTime = 1;
                loopTransition.hasExitTime = true;
                loopTransition.duration = 0;
                loopTransition.offset = 0.99f;

                var backwardTransition = secondState.AddExitTransition();
                backwardTransition.destinationState = mainState;
                backwardTransition.exitTime = 1;
                backwardTransition.hasExitTime = true;
                backwardTransition.duration = 0;
                backwardTransition.offset = 0;

                mmuCreation.Status = MMUCreation.CreationStatus.AnimationSetup;
                CreationStorage.SaveCurrent(mmuCreation);

            });
        }

        mmuCreation.Status = MMUCreation.CreationStatus.FilesSetup;
        CreationStorage.SaveCurrent(mmuCreation);

        //Refresh the asset database to show the new filestructure
        AssetDatabase.Refresh();
    }

    public static bool SetupPrefabs()
    {
        var path = CreateMMUWindow.getPath();
        if (path != null)
        {
            if (CreationStorage.TryLoadCurrent(path, out MMUCreation mmuCreation))
            {
                var description = mmuCreation.Description;
                //Debug.Log("Test of SetupPrefabs: " + mmuCreation.Instance.transform.childCount);
                var instance = mmuCreation.Instance;
                Component c = null;
                c = instance.GetComponent<UnityMMUBase>();

                if (c != null)
                {
                    //Do the initialization
                    AutoCodeGenerator.SetupBoneMapping(instance);
                    AutoCodeGenerator.AutoGenerateScriptInitialization(instance);

                    //Assign the game joint prefab
                    instance.GetComponent<UnityAvatarBase>().gameJointPrefab = Resources.Load("singleBone") as GameObject;

                    //Create prefab
                    bool success = false;
                    GameObject prefab = PrefabUtility.SaveAsPrefabAsset(instance, $"Assets/MMUs/{description.Name}/{description.Name}.prefab", out success);
                    Debug.Log("Creating prefab: " + success);

                    mmuCreation.Prefab = prefab;

                    mmuCreation.Status = MMUCreation.CreationStatus.Completed;
                    CreationStorage.SaveCurrent(mmuCreation);
                    return true;
                }
            }
        }
        return false;
    }

    /// <summary>
    /// Helper function that handles Unity Editor Script reloads.
    /// Script reloads are necessary when new data types should be recognized but
    /// lead to destruction of all (even static) variables and references.
    /// </summary>
    [DidReloadScripts(1000)]
    private static void OnScriptsReload()
    {
        Debug.Log("ScriptReloadCallback");
        var path = CreateMMUWindow.getPath();
        if (path != null)
        {
            if (CreationStorage.TryLoadCurrent(path, out MMUCreation mmuCreation))
            {
                if (mmuCreation.Status == MMUCreation.CreationStatus.FilesSetup && mmuCreation.IsMoCapMMU)
                {
                    Debug.Log("Motion setup after script reload");

                    string fbxAssetPath = $@"Assets/MMUs/{mmuCreation.Description.Name}/{Path.GetFileName(mmuCreation.FbxFilePath)}";
                    var animationClip = AssetDatabase.LoadAssetAtPath<AnimationClip>(fbxAssetPath);

                    var newState = mmuCreation.AnimatorController.AddMotion(animationClip);
                    newState.AddStateMachineBehaviour<AnimationEndEvent>();

                    var loopTransition = newState.AddExitTransition();
                    loopTransition.destinationState = newState;
                    loopTransition.exitTime = 1;
                    loopTransition.hasExitTime = true;
                    loopTransition.duration = 0;

                    mmuCreation.Status = MMUCreation.CreationStatus.AnimationSetup;
                    CreationStorage.SaveCurrent(mmuCreation);
                }

                if (mmuCreation.IsMoCapMMU && mmuCreation.Status == MMUCreation.CreationStatus.AnimationSetup
                    || !mmuCreation.IsMoCapMMU && mmuCreation.Status == MMUCreation.CreationStatus.FilesSetup)
                {
                    var description = mmuCreation.Description;
                    var instance = mmuCreation.Instance;
                    Component component = null;
                    //Add the script directly to the object

                    System.Type compType = System.Type.GetType(description.Name);
                    Debug.Log($"Type: {compType}");
                    component = instance.AddComponent(compType); //ToDo: this type exists only after asset import
                                                                 //Fix: https://docs.unity3d.com/ScriptReference/Callbacks.DidReloadScripts.html
                    if (component == null)
                    {
                        Debug.Log("Still waiting for scripts to reload");
                        mmuCreation.Status = MMUCreation.CreationStatus.MissingBehavior;
                        CreationStorage.SaveCurrent(mmuCreation);
                    }

                    SetupPrefabs();
                }
            }
        }
    }
}
    
#endif